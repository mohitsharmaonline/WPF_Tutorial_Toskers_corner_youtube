<!-- We are basically going to do the same thing but in various forms,
    Using Converters for Visibility, Brushes and 
    TextBox to boolean and reverse conversion. and 
    we can do all of this witout even needing a ViewModel.-->
    <Window x:Class="ValueConverters.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ValueConverters"
        xmlns:converters="clr-namespace:ValueConverters.Converters"
        mc:Ignorable="d"
        Title="Better Example" Height="350" Width="525">
    <Window.Resources>
        <!--You can add all these converters to app.xaml if you don't
        choose to stuff all these in here only.-->
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibility"/>
        <converters:BoolToBrushConeverter x:Key="StatusToBrush"/>
        <converters:BoolToStringConverter x:Key="BoolToString"/>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <StackPanel Grid.Column="0" Grid.Row="0" Margin="5">
            <CheckBox x:Name="visibleCheck" IsChecked="True" Content="Is Visible" />
        </StackPanel>

        <StackPanel Grid.Column="1" Grid.Row="0" Margin="5">
            <Button Content="I am visible!"
                    Visibility="{Binding ElementName=visibleCheck,
                Path=IsChecked,
                Converter={StaticResource BoolToVisibility}}"/>
            <!--You will notice button getting disappered
            as soon as binding is written. Hence we will give
            Checkbox default value for IsChecked as true.-->
        </StackPanel>

        <!--In the next example we have a 'Is Online'
        checkbox and a username. Now if user checks Is Online,
        we want username to be displayed as green, and if he is 
        offline, we want it to be shown as red.-->
        <StackPanel Grid.Column="0" Grid.Row="1" Margin="5">
            <CheckBox x:Name="onlineCheck"
                      Content="Is Online"/>
        </StackPanel>

        <StackPanel Grid.Column="1" Grid.Row="1" Margin="5">
            <Label Content="FrogPattle13"
                   Foreground="{Binding 
                ElementName=onlineCheck, Path=IsChecked,
                Converter={StaticResource StatusToBrush}}"/>
        </StackPanel>
        <!-- In this example we will learn about Converting back 
        and forth rather than only converting to.
        
        So here if we check Signup for newsletter checkbox,
        our textbox should show yes else no.
        However in this example we should also be able to manually
        enter yes or no in textbox and checkbox tick should
        change accordingly.-->

        <StackPanel Grid.Column="0" Grid.Row="2" Margin="5">
            <CheckBox x:Name="newsCheck" Content="Signup for NewsLetter"/>
        </StackPanel>

        <StackPanel Grid.Column="1" Grid.Row="2" Margin="5">
            <Label>Signed up for newsletter</Label>
            <TextBox 
                Text="{Binding 
                ElementName=newsCheck, Path=IsChecked,
                Converter={StaticResource BoolToString}}" />
        </StackPanel>
    </Grid>
</Window>
